TurnSteps = {}
TurnSteps.player_state = {}
TurnSteps.turnColor = nil

function TurnSteps.isOnDeck(guid)
    for _, v in pairs(const.game.supplies) do
        result = getObjectsOnTop(getObjectFromGUID(v).getPosition())[1]
        if(result) then
            if(result.hit_object.getGUID() == guid) then
                return true
            end
        end
    end

    for _, v in pairs(const.game.supplies_upper) do
        result = getObjectsOnTop(getObjectFromGUID(v).getPosition())[1]
        if(result) then
            if(result.hit_object.getGUID() == guid) then
                return true
            end
        end
    end

    for _, v in pairs(const.player) do
        for _, g in pairs(v) do
            result = getObjectsOnTop(getObjectFromGUID(g).getPosition())[1]
            if(result) then
                if(result.hit_object.getGUID() == guid) then
                    return true
                end
            end
        end
    end

    return false
end

function TurnSteps.onTurnEnd(color)
    if(color == nil) then return end
    for guid, obj in pairs(TurnSteps.player_state[color]) do
        if(obj ~= nil and not TurnSteps.isOnDeck(guid)) then
            obj.deal(1, color)
        end
    end
    discardHand(color)
    fillHandFromDeck(color)
end

function TurnSteps.onPlayerTurn( player_color)
    TurnSteps.onTurnEnd(TurnSteps.turnColor)
    TurnSteps.turnColor = player_color.color
    if(TurnSteps.turnColor ~= nil) then
        TurnSteps.player_state[TurnSteps.turnColor] = {}
    end
end


function TurnSteps.onObjectPickUp( player_color, picked_up_object)
    if(player_color == TurnSteps.turnColor)then
        TurnSteps.player_state[TurnSteps.turnColor][picked_up_object.getGUID()] = picked_up_object
    end
end
