#include SetupGameWorkers

SetupGame = {}


function SetupGame.checkSupplyDecks()
    local result = {}
    for i, guid in pairs(const.game.supplies) do
        local deck_board = getObjectFromGUID(guid)
        if deck_board == nil then
            return false, result, "Missing GUID:" .. guid
        end
        objectsOnTop = getObjectsOnTop(deck_board.getPosition())
        if(#objectsOnTop ~= 1)then return false, result, "Missing or wrong card on deck board:" .. i end
        local card = objectsOnTop[1].hit_object
        if(not isCard(card)) then return false, result, "Missing or wrong card on deck:" .. i end
        result[#result + 1] = card
    end
    return true, result
end

function SetupGame.dealStartCards(card, amount)
    for color, _ in pairs(const.player) do
        if(Player[color].seated)then
            print("deal to " .. color)
            local semafor = Semafor.new()
            semafor:P(amount)
            for i = 1, amount do
                local data = {card = card, color = color, semafor = semafor}
                TaskManager.addTask(data, "DealStartCardWorker")
            end
            TaskManager.addTask({semafor = semafor}, "WaitWorker")
        end
    end
end

function SetupGame.setupStartPlayerCards()
    local copperCard = getObjectFromGUID(const.game.stacks.treasure.copper)
    local victoryCard = getObjectFromGUID(const.game.stacks.victory.estate)
    if(not isCard(copperCard) or not isCard(victoryCard)) then
        print("copper or estate card not found")
        return
    end
    SetupGame.dealStartCards(copperCard, 7)
    SetupGame.dealStartCards(victoryCard, 3)
end

function SetupGame.spawnCard(guid, amount)
    local card = getObjectFromGUID(guid)
    local cardJSON = card.getJSON()
    local cardPos = card.getPosition()
    cardPos = {cardPos.x, cardPos.y, cardPos.z}
    for i = 1, amount do
        cardPos[2] = cardPos[2] + 0.3
        local newPos = {cardPos[1], cardPos[2], cardPos[3]}
        local data = {position = newPos, json = cardJSON}
        TaskManager.addTask(data, "DuplicateCardWorker")
    end
end

function SetupGame.setupStartCards()
    local players = getPlayersCount()
    if(players <= 0 or players > #const.game.cardsCount) then
        print("Wrong number of players: " .. players)
        return
    end
    local cardCount = const.game.cardsCount[players]
    local cardGuid = const.game.stacks
    SetupGame.spawnCard(cardGuid.curse, cardCount.curse - 1)
    for k, v in pairs(cardCount.victory) do
        SetupGame.spawnCard(cardGuid.victory[k], v - 1)
    end
    for k, v in pairs(cardCount.treasure) do
        SetupGame.spawnCard(cardGuid.treasure[k], v - 1)
    end
end

function SetupGame.setupSupplyCards(amount, cards)
    for _, card in pairs(cards) do
        SetupGame.spawnCard(card.getGUID(), amount - 1)
    end
end

function SetupGame.cleanTable()
    for k, v in pairs(const.game.removable) do
        local obj = getObjectFromGUID(v)
        if(obj) then
            obj.destruct()
        end
    end
end

function SetupGame.discardSetup()
    for color, _ in pairs(const.player) do
        if(Player[color].seated)then
            TaskManager.addTask({color = color}, "DiscardHandWorker")
            --fillHandFromDeck(color)
        end
    end
end

function SetupGame.SetupGame()
    local players = getPlayersCount()
    if(players <= 0 or players > #const.game.cardsCount) then
        print("Wrong number of players: " .. players)
        return
    end
    local cardCount = const.game.cardsCount[players]
    local isValid, cards, error = SetupGame.checkSupplyDecks()
    isValid = true
    if(isValid)then
        SetupGame.cleanTable()
        SetupGame.setupStartPlayerCards()
        SetupGame.setupStartCards()
        SetupGame.setupSupplyCards(cardCount.supply, cards)
        SetupGame.discardSetup()
        return true
    else
        print("SupplyDecksError: " .. error)
        return false
    end
end

function SetupGame.onLoad()
    TaskManager.addWorker(SetupGameWorkers.DealStartCardWorker, "DealStartCardWorker", 1 / 20)
    TaskManager.addWorker(SetupGameWorkers.DuplicateCardWorker, "DuplicateCardWorker", 1 / 30)
    TaskManager.addWorker(SetupGameWorkers.DiscardHandWorker, "DiscardHandWorker", 1 / 20)
end
