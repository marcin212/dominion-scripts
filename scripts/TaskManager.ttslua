TaskManager = {}
TaskManager.Lock = false
TaskManager.Workers = {}
TaskManager.Queue = Queue.new()
TaskManager.WaitQueue = Queue.new()

-- Add new data to process
-- data is your table for worker
-- type is worker type which will process the data
-- returns true if the task has been added. False otherwise.
function TaskManager.addTask(data, type)
    if(TaskManager.Workers[type]) then
        TaskManager.Queue:Add({data = data, type = type})
        return true
    else
        return false, "Worker of type \"" .. type .."\" doesn't exists."
    end
end


function TaskManager.AddForceTask (data, type)
    if(TaskManager.Workers[type]) then
        TaskManager.WaitQueue:AddFirst({data = data, type = type})
        return true
    else
        return false, "Worker of type \"" .. type .."\" doesn't exists."
    end
end

-- Add new worker
-- func is your main function of worker
-- type is worker unique type
-- time is worker polling time for task in seconds
function TaskManager.addWorker(func, type, time)
    if(TaskManager.Workers[type]) then
        return false, "Worker of type \"" .. type .."\" exists"
    else
        TaskManager.Workers[type] = Wait.time(function()
            if(TaskManager.Lock) then return end
            local task = TaskManager.Queue:Get()
            --print("task" .. task.type)
            if(task ~= nil and task.type == type) then
                TaskManager.Lock = true
                if(not func(task.data)) then
                    TaskManager.Queue:Remove()
                end
                TaskManager.Lock = false
            end
            local waitTask = TaskManager.WaitQueue:Get()
            while waitTask ~= nil do
                TaskManager.Queue:AddFirst(TaskManager.WaitQueue:Remove())
                waitTask = TaskManager.WaitQueue:Get()
            end
        end, time, - 1)
        return true
    end
end


function WaitWorker(data)
    return not data.semafor:isReleased()
end
